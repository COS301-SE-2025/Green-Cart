
name: AWS Deployment

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  frontend-deploy:
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get current branch name
        id: branch
        run: echo "branch=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT

      - name: Install dependencies
        run: cd frontend && npm install

      - name: Build frontend
        run: cd frontend && npm run build

      - name: Clean up test files and create SPA routing files
        run: |
          # Remove test files from root directory (but keep integration-tests and unit-tests)
          rm -f test_*.py test_*.html || true
          
          # Create _redirects file for better SPA routing (if using Netlify-style hosting)
          cat > frontend/dist/_redirects << 'EOF'
          /*    /index.html   200
          EOF
          
          # Copy index.html to 404.html for S3 static hosting fallback
          cp frontend/dist/index.html frontend/dist/404.html
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Sync to S3
        run: |
          # Sync files to S3 with delete flag
          aws s3 sync frontend/dist/ s3://${{ secrets.AWS_S3_BUCKET }}/ --delete

      - name: Configure S3 for SPA routing
        run: |
          # Configure S3 bucket for static website hosting with error document
          aws s3 website s3://${{ secrets.AWS_S3_BUCKET }} \
            --index-document index.html \
            --error-document 404.html
          
          # Set proper MIME types for JavaScript files
          aws s3 cp s3://${{ secrets.AWS_S3_BUCKET }}/ s3://${{ secrets.AWS_S3_BUCKET }}/ \
            --recursive \
            --exclude "*" \
            --include "*.js" \
            --content-type "application/javascript" \
            --metadata-directive REPLACE || true
          
          # Set proper MIME types for CSS files  
          aws s3 cp s3://${{ secrets.AWS_S3_BUCKET }}/ s3://${{ secrets.AWS_S3_BUCKET }}/ \
            --recursive \
            --exclude "*" \
            --include "*.css" \
            --content-type "text/css" \
            --metadata-directive REPLACE || true
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}

      - name: Configure CloudFront for SPA routing
        run: |
          # Install jq for JSON processing
          sudo apt-get update
          sudo apt-get install -y jq
          
          # Get current CloudFront distribution configuration
          DISTRIBUTION_CONFIG=$(aws cloudfront get-distribution-config --id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} --output json)
          ETAG=$(echo $DISTRIBUTION_CONFIG | jq -r '.ETag')
          
          # Create custom error page configuration for SPA routing
          cat > cloudfront-config.json << 'EOF'
          {
            "CustomErrorResponses": {
              "Quantity": 2,
              "Items": [
                {
                  "ErrorCode": 404,
                  "ResponsePagePath": "/index.html",
                  "ResponseCode": "200",
                  "ErrorCachingMinTTL": 300
                },
                {
                  "ErrorCode": 403,
                  "ResponsePagePath": "/index.html", 
                  "ResponseCode": "200",
                  "ErrorCachingMinTTL": 300
                }
              ]
            }
          }
          EOF
          
          # Update the distribution config with custom error pages
          UPDATED_CONFIG=$(echo $DISTRIBUTION_CONFIG | jq '.DistributionConfig.CustomErrorResponses = {
            "Quantity": 2,
            "Items": [
              {
                "ErrorCode": 404,
                "ResponsePagePath": "/index.html",
                "ResponseCode": "200",
                "ErrorCachingMinTTL": 300
              },
              {
                "ErrorCode": 403,
                "ResponsePagePath": "/index.html", 
                "ResponseCode": "200",
                "ErrorCachingMinTTL": 300
              }
            ]
          }')
          
          # Save the updated config
          echo $UPDATED_CONFIG | jq '.DistributionConfig' > updated-distribution-config.json
          
          # Update CloudFront distribution
          aws cloudfront update-distribution \
            --id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} \
            --distribution-config file://updated-distribution-config.json \
            --if-match $ETAG
          
          echo "CloudFront distribution updated with SPA routing support"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}

      - name: Invalidate CloudFront
        uses: chetan/invalidate-cloudfront-action@v2
        env:
          DISTRIBUTION: ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}
          PATHS: '/*'
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  backend-deploy:
    runs-on: ubuntu-latest
    needs: frontend-deploy
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy backend using Git Clone
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            echo "=== Starting Backend Deployment ==="
            
            # Clean up disk space first
            echo "Checking disk usage before cleanup..."
            df -h
            
            # Stop existing backend service
            sudo systemctl stop green-cart-backend || true
            sudo systemctl disable green-cart-backend || true
            
            # Clean up old service files
            sudo rm -f /etc/systemd/system/green-cart-backend.service || true
            sudo systemctl daemon-reload
            sudo apt-get autoremove -y || true
            sudo apt-get autoclean || true
            
            # Remove old deployment
            cd /home/ubuntu
            sudo rm -rf Green-Cart || true
            
            echo "=== Cloning Latest Code ==="
            # Clone the latest code
            git clone https://github.com/COS301-SE-2025/Green-Cart.git
            cd Green-Cart
            git checkout main
            git pull origin main
            
            echo "=== Cleaning up test files ==="
            # Remove test files from root directory but keep integration-tests and unit-tests folders
            rm -f test_*.py test_*.html || true
            echo "Test files cleaned up"
            
            echo "=== Verifying Files ==="
            echo "Files in directory:"
            ls -la
            
            # Check if required files exist
            if [ ! -f "Dockerfile" ]; then
              echo "ERROR: Dockerfile not found!"
              exit 1
            fi
            
            if [ ! -f "requirements.txt" ]; then
              echo "ERROR: requirements.txt not found!"
              exit 1
            fi
            
            if [ ! -d "app" ]; then
              echo "ERROR: app directory not found!"
              exit 1
            fi
            
            echo "All required files present"
            
            echo "=== Creating Production Environment ==="
            cat > .env << EOF
            DATABASE_URL=${{ secrets.DATABASE_URL }}
            AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
            AWS_REGION=${{ secrets.AWS_REGION }}
            AWS_S3_BUCKET_NAME=${{ secrets.AWS_S3_BUCKET_NAME }}
            BASE_URL=https://api.greencart-cos301.co.za
            EOF
            
            echo "=== Installing Python and Dependencies ==="
            # Install Python 3.12 (default on Ubuntu 24.04) and required packages
            sudo apt-get update
            sudo apt-get install -y python3 python3-pip python3-venv python3-full python3-dev build-essential
            
            # Create a virtual environment using system Python (3.12)
            python3 -m venv venv
            source venv/bin/activate
            
            # Upgrade pip in virtual environment
            pip install --upgrade pip
            
            # Install requirements in virtual environment
            pip install -r requirements.txt
            
            echo "=== Creating systemd service for backend ==="
            # Stop existing service if running
            sudo systemctl stop green-cart-backend || true
            
            # Create systemd service file
            sudo tee /etc/systemd/system/green-cart-backend.service > /dev/null << EOF
            [Unit]
            Description=Green Cart Backend API
            After=network.target
            
            [Service]
            Type=simple
            User=ubuntu
            WorkingDirectory=/home/ubuntu/Green-Cart
            Environment=PATH=/home/ubuntu/Green-Cart/venv/bin
            EnvironmentFile=/home/ubuntu/Green-Cart/.env
            ExecStart=/home/ubuntu/Green-Cart/venv/bin/uvicorn app.main:app --host 0.0.0.0 --port 8000
            Restart=always
            RestartSec=10
            
            [Install]
            WantedBy=multi-user.target
            EOF
            
            # Reload systemd and start service
            sudo systemctl daemon-reload
            sudo systemctl enable green-cart-backend
            sudo systemctl start green-cart-backend
            
            echo "=== Starting Backend Service ==="
            # Wait a moment for service to start
            sleep 5
            
            # Check if service is running
            if ! sudo systemctl is-active --quiet green-cart-backend; then
              echo "ERROR: Backend service failed to start!"
              echo "Service status:"
              sudo systemctl status green-cart-backend
              echo "Service logs:"
              sudo journalctl -u green-cart-backend --no-pager -n 50
              exit 1
            fi
            
            echo "=== Validating Deployment ==="
            sleep 10
            
            # Check if service is running
            if ! sudo systemctl is-active --quiet green-cart-backend; then
              echo "ERROR: Service is not running!"
              echo "Service logs:"
              sudo journalctl -u green-cart-backend --no-pager -n 50
              exit 1
            fi
            
            # Test health endpoint
            echo "Testing health endpoint..."
            for i in {1..30}; do
              if curl -f http://localhost:8000/health; then
                echo "Backend is healthy!"
                break
              fi
              if [ $i -eq 30 ]; then
                echo "ERROR: Health check failed after 30 attempts!"
                echo "Service logs:"
                sudo journalctl -u green-cart-backend --no-pager -n 50
                exit 1
              fi
              echo "Attempt $i/30: Health check failed, retrying..."
              sleep 2
            done
            
            # Test external API
            echo "Testing external API..."
            if curl -f https://api.greencart-cos301.co.za/health; then
              echo "External API is working!"
            else
              echo "External API test failed, but backend is running locally"
            fi
            
            echo "=== Fixing Database URLs ==="
            sleep 5
            
            # Check for localhost URLs and fix them
            LOCALHOST_COUNT=$(curl -s http://localhost:8000/admin/check-localhost-urls | grep -o '"localhost_urls_count":[0-9]*' | grep -o '[0-9]*' || echo "0")
            echo "Found $LOCALHOST_COUNT localhost URLs in database"
            
            if [ "$LOCALHOST_COUNT" -gt 0 ]; then
              echo "Fixing localhost URLs..."
              if curl -X POST -f http://localhost:8000/admin/fix-image-urls; then
                echo "Successfully fixed $LOCALHOST_COUNT image URLs!"
              else
                echo "Warning: Could not fix image URLs automatically"
              fi
            else
              echo "No localhost URLs found in database"
            fi
            
            echo "=== Deployment Complete ==="
            echo "Final disk usage:"
            df -h
            
            echo "Service status:"
            sudo systemctl status green-cart-backend --no-pager
            
            echo "Backend deployment successful!"